// this file assumes we have a server running at localhost:3000

const { execSync } = require("child_process");

const MAX = 256;
const blockSize = 20; // bytes

const TIME_PER_BYTE = 50e6; // ms
const NS_PER_SEC = 1e9;

const avg = async hmac => {
  let avgResponseTime = 0;
  for (let j = 0; j < 32; j++) {
    const time1 = process.hrtime();
    await execSync(`curl -s localhost:3000/file/${hmac}`);
    const time2 = process.hrtime(time1);
    avgResponseTime += time2[0] * NS_PER_SEC + time2[1];
  }
  avgResponseTime /= 20;
  return avgResponseTime;
};

const run = async () => {
  let hmac = [];

  for (let i = 0; i < blockSize; i++) {
    if (hmac.length !== i) {
      throw new Error("a likely byte was not found in the previous step");
    }
    // calculate average response time for current blockSize
    const avgResponseTime = await avg(
      Buffer.from([...hmac, 0]).toString("hex")
    );
    console.log("avgResponseTime", avgResponseTime);

    for (let j = 0; j < MAX; j++) {
      const timeToRun = await avg(Buffer.from([...hmac, j]).toString("hex"));
      console.log(
        "timeToRun",
        timeToRun,
        "TIME_TO_FAIL",
        avgResponseTime + 5e6,
        Buffer.from([j]).toString("hex")
      );
      if (timeToRun > avgResponseTime + 4.5e6) {
        hmac.push(j);
        break;
      }
    }
  }
  return hmac;
};

run().then(hmac => {
  console.log("HMAC is", hmac);
  process.exit(0);
});
